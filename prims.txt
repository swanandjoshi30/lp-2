INF = 999999

def prims(n, cost):
    selected = [False] * n
    selected[0] = True
    mst = []

    for _ in range(n - 1):
        min_edge = INF
        u = v = -1

        for i in range(n):
            if selected[i]:
                for j in range(n):
                    if not selected[j] and cost[i][j] != 0 and cost[i][j] < min_edge:
                        min_edge = cost[i][j]
                        u, v = i, j

        selected[v] = True
        mst.append((u, v, cost[u][v]))

    return mst


print("Enter number of vertices:")
n = int(input())

print(f"Enter the cost adjacency matrix ({n}x{n}):")
cost = []
for _ in range(n):
    row = list(map(int, input().split()))
    cost.append(row)

mst = prims(n, cost)

print("\nMinimum Spanning Tree:")
total_weight = 0
for u, v, w in mst:
    print(f"{chr(65+u)} - {chr(65+v)} : {w}")
    total_weight += w

print(f"Total Weight of MST: {total_weight}")
